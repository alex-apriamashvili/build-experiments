
// This code was @generated by Uber Poet, a mock application generator.
// Check it out at https://github.com/uber/uber-poet



public func complexCrap5230<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5231<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5232<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public class MyClass5233 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap5234<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5235<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5236<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5237<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5238<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass5239 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap5240<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5241<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5242<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5243<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5244<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass5245 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap5246<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5247<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5248<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5249<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap5250<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}