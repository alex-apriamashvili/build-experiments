
// This code was @generated by Uber Poet, a mock application generator.
// Check it out at https://github.com/uber/uber-poet



public func complexCrap10249<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10250<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10251<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public class MyClass10252 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap10253<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10254<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10255<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10256<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10257<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass10258 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap10259<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10260<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10261<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10262<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10263<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass10264 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap10265<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10266<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10267<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10268<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap10269<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}