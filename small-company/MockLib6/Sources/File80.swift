
// This code was @generated by Uber Poet, a mock application generator.
// Check it out at https://github.com/uber/uber-poet



public func complexCrap14680<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14681<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14682<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public class MyClass14683 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap14684<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14685<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14686<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14687<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14688<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass14689 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap14690<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14691<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14692<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14693<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14694<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass14695 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap14696<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14697<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14698<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14699<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14700<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}