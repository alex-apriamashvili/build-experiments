
// This code was @generated by Uber Poet, a mock application generator.
// Check it out at https://github.com/uber/uber-poet



public func complexCrap14449<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14450<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14451<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public class MyClass14452 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap14453<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14454<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14455<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14456<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14457<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass14458 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap14459<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14460<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14461<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14462<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14463<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass14464 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap14465<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14466<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14467<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14468<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap14469<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}