
// This code was @generated by Uber Poet, a mock application generator.
// Check it out at https://github.com/uber/uber-poet



public func complexCrap19300<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19301<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19302<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * 7 + Int(Float(arg) / 32.0))
    let b = Int(4 * 7 + Int(Float(arg) / 32.0))
    let c = Int(4 * 7 + Int(Float(arg) / 32.0))
    return Int(4 * 7 + Int(Float(arg) / 32.0)) + a + b + c
}

public class MyClass19303 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap19304<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19305<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19306<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19307<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19308<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass19309 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap19310<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19311<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19312<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19313<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19314<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}

public class MyClass19315 {
    public let x: Int
    public let y: String

    public init() {
        x = 7
        y = "hi"
    }

    
public func complexCrap19316<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19317<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19318<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19319<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}

public func complexCrap19320<T>(arg: Int, stuff:T) -> Int {
    let a = Int(4 * x + Int(Float(arg) / 32.0))
    let b = Int(4 * x + Int(Float(arg) / 32.0))
    let c = Int(4 * x + Int(Float(arg) / 32.0))
    return Int(4 * x + Int(Float(arg) / 32.0)) + a + b + c
}
}